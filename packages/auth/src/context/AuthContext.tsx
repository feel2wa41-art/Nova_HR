import React, { createContext, useContext, useEffect, useState } from 'react';\nimport type { User } from '@nova-hr/shared';\nimport { getStoredToken, removeStoredToken } from '../utils/storage';\nimport { isTokenValid } from '../utils/token';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  updateUser: (user: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = getStoredToken();\n      \n      if (token && isTokenValid(token)) {\n        // TODO: Validate token with server and get user info\n        // For now, just check if token exists and is valid\n        setIsLoading(false);\n      } else {\n        removeStoredToken();\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = (userData: User, token: string) => {\n    setUser(userData);\n    // Token storage is handled by the login hook\n  };\n\n  const logout = () => {\n    setUser(null);\n    removeStoredToken();\n  };\n\n  const updateUser = (userData: Partial<User>) => {\n    if (user) {\n      setUser({ ...user, ...userData });\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};"