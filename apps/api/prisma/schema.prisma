generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_user {
  id                               String                        @id @default(uuid())
  email                            String                        @unique
  password                         String
  name                             String
  title                            String?
  phone                            String?
  avatar_url                       String?
  status                           String                        @default("ACTIVE")
  role                             String                        @default("EMPLOYEE")
  tenant_id                        String?
  org_id                           String?
  last_login                       DateTime?
  created_at                       DateTime                      @default(now())
  updated_at                       DateTime                      @updatedAt
  language                         String                        @default("en")
  approval_actions                 approval_action[]
  approval_drafts                  approval_draft[]
  approval_route_approvers         approval_route_approver[]
  attendance                       attendance[]
  attendance_requests              attendance_request[]
  attitude_sessions                attitude_session[]
  audit_logs                       audit_log[]
  org_unit                         org_unit?                     @relation("org_members", fields: [org_id], references: [id])
  tenant                           tenant?                       @relation(fields: [tenant_id], references: [id])
  uploaded_board_attachments       board_attachment[]            @relation("uploaded_board_attachments")
  authored_comments                board_comment[]               @relation("authored_comments")
  board_likes                      board_like[]
  authored_posts                   board_post[]                  @relation("authored_posts")
  business_trips                   business_trip_request[]       @relation("user_business_trips")
  uploaded_event_attachments       calendar_event_attachment[]   @relation("uploaded_event_attachments")
  calendar_event_attendees         calendar_event_attendee[]     @relation("event_attendees")
  created_calendar_events          calendar_event[]              @relation("created_events")
  read_announcements               company_announcement_read[]   @relation("read_announcements")
  authored_announcements           company_announcement[]        @relation("authored_announcements")
  reviewed_reports                 daily_report[]                @relation("reviewed_daily_reports")
  daily_reports                    daily_report[]                @relation("user_daily_reports")
  employee_profile                 employee_profile?
  uploaded_attachments             event_attachment[]            @relation("uploaded_attachments")
  event_participations             event_participant[]
  organized_events                 event[]                       @relation("organized_events")
  approved_expenses                expense_request[]             @relation("approved_expense_requests")
  rejected_expenses                expense_request[]             @relation("rejected_expense_requests")
  expense_requests                 expense_request[]             @relation("user_expense_requests")
  uploaded_community_attachments   hr_community_attachment[]     @relation("uploaded_community_attachments")
  authored_community_comments      hr_community_comment[]        @relation("authored_community_comments")
  community_likes                  hr_community_like[]           @relation("community_likes")
  received_community_notifications hr_community_notification[]   @relation("received_community_notifications")
  authored_community_posts         hr_community_post[]           @relation("authored_community_posts")
  community_views                  hr_community_view[]           @relation("community_views")
  leave_requests                   leave_request[]
  notifications                    notification[]                @relation("user_notifications")
  uploaded_overtime_attachments    overtime_attachment[]         @relation("uploaded_overtime_attachments")
  approved_overtime_requests       overtime_request[]            @relation("approved_overtime_requests")
  overtime_requests                overtime_request[]            @relation("user_overtime_requests")
  password_reset_tokens            password_reset_token[]        @relation("password_reset_tokens")
  reference_document_views         reference_document_view[]     @relation("reference_document_views")
  reference_documents              reference_document[]          @relation("reference_documents")
  calendar_settings                user_calendar_settings?       @relation("calendar_settings")
  grades                           user_grade[]                  @relation("user_grades")
  user_leave_balances              user_leave_balance[]
  notification_preferences         user_notification_preference? @relation("notification_preferences")
  positions                        user_position[]               @relation("user_positions")
  user_status                      user_status?
  web_push_subscriptions           web_push_subscription[]       @relation("web_push_subscriptions")
  reviewed_weekly_reports          weekly_report[]               @relation("reviewed_weekly_reports")
  weekly_reports                   weekly_report[]               @relation("user_weekly_reports")

  @@map("auth_users")
}

model password_reset_token {
  id         String    @id @default(uuid())
  user_id    String
  token      String    @unique
  expires_at DateTime
  used       Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       auth_user @relation("password_reset_tokens", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model program_category {
  id                    String                     @id @default(uuid())
  company_id            String
  name                  String
  description           String?
  color                 String?
  icon                  String?
  is_active             Boolean                    @default(true)
  created_at            DateTime                   @default(now())
  updated_at            DateTime                   @updatedAt
  daily_report_entries  daily_report_entry[]
  company               company                    @relation(fields: [company_id], references: [id])
  program_mappings      program_category_mapping[]
  weekly_report_entries weekly_report_entry[]

  @@map("program_categories")
}

model program_category_mapping {
  id           String           @id @default(uuid())
  category_id  String
  program_name String
  is_active    Boolean          @default(true)
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  category     program_category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([category_id, program_name])
  @@map("program_category_mappings")
}

model daily_report {
  id            String               @id @default(uuid())
  user_id       String
  report_date   DateTime             @db.Date
  summary       String?
  achievements  String?
  challenges    String?
  tomorrow_plan String?
  status        String               @default("DRAFT")
  submitted_at  DateTime?
  reviewed_by   String?
  reviewed_at   DateTime?
  review_notes  String?
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  entries       daily_report_entry[]
  reviewer      auth_user?           @relation("reviewed_daily_reports", fields: [reviewed_by], references: [id])
  user          auth_user            @relation("user_daily_reports", fields: [user_id], references: [id])

  @@unique([user_id, report_date])
  @@map("daily_reports")
}

model daily_report_entry {
  id               String           @id @default(uuid())
  report_id        String
  category_id      String
  task_description String
  duration_minutes Int
  programs_used    String[]
  output           String?
  notes            String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  category         program_category @relation(fields: [category_id], references: [id])
  report           daily_report     @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@map("daily_report_entries")
}

model weekly_report {
  id                     String                @id @default(uuid())
  user_id                String
  week_start             DateTime              @db.Date
  week_end               DateTime              @db.Date
  summary                String?
  achievements           String?
  challenges             String?
  next_week_goals        String?
  status                 String                @default("DRAFT")
  submitted_at           DateTime?
  reviewed_by            String?
  reviewed_at            DateTime?
  is_auto_generated      Boolean               @default(false)
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  daily_reports_included String[]
  entries                weekly_report_entry[]
  reviewer               auth_user?            @relation("reviewed_weekly_reports", fields: [reviewed_by], references: [id])
  user                   auth_user             @relation("user_weekly_reports", fields: [user_id], references: [id])

  @@unique([user_id, week_start])
  @@map("weekly_reports")
}

model weekly_report_entry {
  id            String           @id @default(uuid())
  report_id     String
  category_id   String
  summary       String
  total_hours   Int
  key_tasks     String[]
  deliverables  String[]
  programs_used String[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  category      program_category @relation(fields: [category_id], references: [id])
  report        weekly_report    @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@map("weekly_report_entries")
}

model user_status {
  id              String    @id @default(uuid())
  user_id         String    @unique
  status          String    @default("ACTIVE")
  last_seen       DateTime?
  location        String?
  mood            String?
  status_message  String?
  birthday        DateTime? @db.Date
  phone_extension String?
  updated_at      DateTime  @updatedAt
  created_at      DateTime  @default(now())
  user            auth_user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_statuses")
}

model event {
  id               String              @id @default(uuid())
  company_id       String
  title            String
  description      String?
  event_type       String              @default("GENERAL")
  start_date       DateTime
  end_date         DateTime?
  all_day          Boolean             @default(false)
  location         String?
  organizer_id     String
  max_participants Int?
  is_public        Boolean             @default(true)
  status           String              @default("ACTIVE")
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  attachments      event_attachment[]
  participants     event_participant[]
  company          company             @relation(fields: [company_id], references: [id], onDelete: Cascade)
  organizer        auth_user           @relation("organized_events", fields: [organizer_id], references: [id])

  @@map("events")
}

model event_participant {
  id           String    @id @default(uuid())
  event_id     String
  user_id      String
  status       String    @default("PENDING")
  responded_at DateTime?
  notes        String?
  created_at   DateTime  @default(now())
  event        event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user         auth_user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@map("event_participants")
}

model event_attachment {
  id          String    @id @default(uuid())
  event_id    String
  filename    String
  file_path   String
  file_size   Int
  mime_type   String
  uploaded_by String
  created_at  DateTime  @default(now())
  event       event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user        auth_user @relation("uploaded_attachments", fields: [uploaded_by], references: [id])

  @@map("event_attachments")
}

model board_category {
  id          String       @id @default(uuid())
  company_id  String
  name        String
  description String?
  color       String?      @default("#1890ff")
  icon        String?
  order_index Int          @default(0)
  is_active   Boolean      @default(true)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  company     company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  posts       board_post[]

  @@map("board_categories")
}

model board_post {
  id           String             @id @default(uuid())
  category_id  String
  author_id    String
  title        String
  content      String
  is_pinned    Boolean            @default(false)
  is_important Boolean            @default(false)
  view_count   Int                @default(0)
  status       String             @default("PUBLISHED")
  tags         String[]
  expires_at   DateTime?
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  attachments  board_attachment[]
  comments     board_comment[]
  likes        board_like[]
  author       auth_user          @relation("authored_posts", fields: [author_id], references: [id])
  category     board_category     @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("board_posts")
}

model board_comment {
  id         String          @id @default(uuid())
  post_id    String
  author_id  String
  content    String
  parent_id  String?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  author     auth_user       @relation("authored_comments", fields: [author_id], references: [id])
  parent     board_comment?  @relation("comment_replies", fields: [parent_id], references: [id])
  replies    board_comment[] @relation("comment_replies")
  post       board_post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("board_comments")
}

model board_attachment {
  id          String     @id @default(uuid())
  post_id     String
  filename    String
  file_path   String
  file_size   Int
  mime_type   String
  uploaded_by String
  created_at  DateTime   @default(now())
  post        board_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user        auth_user  @relation("uploaded_board_attachments", fields: [uploaded_by], references: [id])

  @@map("board_attachments")
}

model board_like {
  id         String     @id @default(uuid())
  post_id    String
  user_id    String
  created_at DateTime   @default(now())
  post       board_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       auth_user  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("board_likes")
}

model tenant {
  id                         String                     @id @default(uuid())
  name                       String
  domain                     String                     @unique
  status                     String                     @default("ACTIVE")
  plan                       String                     @default("BASIC")
  max_users                  Int                        @default(100)
  settings                   Json?
  created_at                 DateTime                   @default(now())
  updated_at                 DateTime                   @updatedAt
  approval_route_templates   approval_route_template[]
  users                      auth_user[]
  auto_approval_settings     auto_approval_settings[]
  companies                  company[]
  company_requests           company_request[]
  leave_allocation_histories leave_allocation_history[]
  leave_types                leave_type[]
  user_leave_balances        user_leave_balance[]
  attendance                 attendance[]
  attendance_requests        attendance_request[]
  leave_requests             leave_request[]
  approval_drafts            approval_draft[]
  attitude_session           attitude_session[]

  @@map("tenants")
}

model company {
  id                     String                   @id @default(uuid())
  tenant_id              String
  name                   String
  biz_no                 String?
  ceo_name               String?
  phone                  String?
  email                  String?
  address                String?
  timezone               String                   @default("Asia/Jakarta")
  currency               String                   @default("IDR")
  logo_url               String?
  settings               Json?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  auto_approval_settings auto_approval_settings[]
  board_categories       board_category[]
  business_trip_setting  business_trip_setting?   @relation("company_business_trip_setting")
  calendar_events        calendar_event[]
  code_categories        common_code_category[]   @relation("company_code_categories")
  tenant                 tenant                   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  company_announcements  company_announcement[]
  feature_config         company_feature_config?  @relation("company_features")
  feature_limits         company_feature_limit[]  @relation("company_limits")
  locations              company_location[]
  currency_setting       currency_setting?        @relation("company_currency_setting")
  events                 event[]
  expense_limits         expense_limit[]          @relation("company_expense_limits")
  hr_community_posts     hr_community_post[]
  notification_templates notification_template[]
  org_units              org_unit[]
  overtime_policies      overtime_policy[]        @relation("company_overtime_policies")
  overtime_requests      overtime_request[]       @relation("company_overtime_requests")
  program_categories     program_category[]
  reference_documents    reference_document[]
  work_policies          work_policy[]

  @@map("companies")
}

model company_location {
  id                  String             @id @default(uuid())
  company_id          String
  name                String
  code                String?
  address             String?
  lat                 Float
  lng                 Float
  radius_m            Int                @default(200)
  wifi_ssids          String[]
  ip_cidrs            String[]
  web_checkin_allowed Boolean            @default(true)
  face_required       Boolean            @default(false)
  status              String             @default("ACTIVE")
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  company             company            @relation(fields: [company_id], references: [id], onDelete: Cascade)
  employee_profiles   employee_profile[]

  @@map("company_locations")
}

model org_unit {
  id          String      @id @default(uuid())
  company_id  String
  parent_id   String?
  name        String
  code        String?
  description String?
  order_index Int         @default(0)
  status      String      @default("ACTIVE")
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  members     auth_user[] @relation("org_members")
  company     company     @relation(fields: [company_id], references: [id], onDelete: Cascade)
  parent      org_unit?   @relation("org_hierarchy", fields: [parent_id], references: [id])
  children    org_unit[]  @relation("org_hierarchy")

  @@map("org_units")
}

model employee_profile {
  id                String            @id @default(uuid())
  user_id           String            @unique
  emp_no            String?           @unique
  department        String?
  hire_date         DateTime?
  base_location_id  String?
  address           String?
  emergency_contact String?
  emergency_phone   String?
  employment_type   String            @default("FULL_TIME")
  salary            Decimal?          @db.Decimal(15, 2)
  bank_account      String?
  tax_id            String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  base_location     company_location? @relation(fields: [base_location_id], references: [id])
  user              auth_user         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("employee_profiles")
}

model attendance {
  id                String          @id @default(uuid())
  user_id           String
  tenant_id         String
  date_key          DateTime
  check_in_at       DateTime?
  check_in_loc      Json?
  check_out_at      DateTime?
  check_out_loc     Json?
  status            String          @default("NORMAL")
  work_minutes      Int             @default(0)
  break_minutes     Int             @default(0)
  overtime_minutes  Int             @default(0)
  notes             String?
  approval_draft_id String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  approval_draft    approval_draft? @relation(fields: [approval_draft_id], references: [id])
  user              auth_user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant            tenant          @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@unique([user_id, date_key])
  @@index([tenant_id])
  @@map("attendance")
}

model attendance_request {
  id           String    @id @default(uuid())
  user_id      String
  tenant_id    String
  request_type String
  target_at    DateTime
  reason_code  String?
  reason_text  String?
  attach_urls  String[]
  geo_snapshot Json?
  status       String    @default("PENDING")
  decided_by   String?
  decided_at   DateTime?
  comments     String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         auth_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant       tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id])
  @@map("attendance_requests")
}

model work_policy {
  id              String   @id @default(uuid())
  company_id      String
  name            String
  description     String?
  work_days       Int[]    @db.SmallInt
  start_time      String
  end_time        String
  lunch_start     String?
  lunch_end       String?
  late_threshold  Int      @default(15)
  early_threshold Int      @default(15)
  rounding_mode   String   @default("NONE")
  backdate_days   Int      @default(7)
  geofence_strict Boolean  @default(true)
  face_required   Boolean  @default(false)
  web_checkin     Boolean  @default(true)
  is_default      Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  company         company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("work_policies")
}

model leave_type {
  id                String               @id @default(uuid())
  company_id        String?
  name              String
  code              String
  description       String?
  max_days_year     Int?
  carry_forward     Boolean              @default(false)
  requires_approval Boolean              @default(true)
  deduct_weekends   Boolean              @default(false)
  color_hex         String               @default("#3b82f6")
  is_paid           Boolean              @default(true)
  is_active         Boolean              @default(true)
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  allow_half_days   Boolean              @default(true)
  default_days_year Int?
  display_order     Int                  @default(0)
  tenant_id         String
  leave_requests    leave_request[]
  tenant            tenant               @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user_balances     user_leave_balance[]

  @@unique([code, tenant_id, company_id])
  @@map("leave_types")
}

model user_leave_balance {
  id            String     @id @default(uuid())
  tenant_id     String
  user_id       String
  leave_type_id String
  company_id    String
  year          Int
  allocated     Decimal    @default(0) @db.Decimal(5, 2)
  used          Decimal    @default(0) @db.Decimal(5, 2)
  pending       Decimal    @default(0) @db.Decimal(5, 2)
  available     Decimal    @db.Decimal(5, 2)
  notes         String?
  updated_by    String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  leave_type    leave_type @relation(fields: [leave_type_id], references: [id])
  tenant        tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user          auth_user  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, leave_type_id, year, tenant_id])
  @@index([tenant_id, company_id])
  @@map("user_leave_balances")
}

model leave_request {
  id                String          @id @default(uuid())
  user_id           String
  tenant_id         String
  leave_type_id     String
  start_date        DateTime
  end_date          DateTime
  days_count        Decimal         @db.Decimal(5, 2)
  reason            String?
  emergency         Boolean         @default(false)
  emergency_contact String?
  duration          String?
  attach_urls       String[]
  status            String          @default("PENDING")
  decided_by        String?
  decided_at        DateTime?
  submitted_at      DateTime?
  comments          String?
  approval_draft_id String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  approval_draft    approval_draft? @relation(fields: [approval_draft_id], references: [id])
  leave_type        leave_type      @relation(fields: [leave_type_id], references: [id])
  user              auth_user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant            tenant          @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id])
  @@index([tenant_id, status])
  @@map("leave_requests")
}

model leave_allocation_history {
  id            String   @id @default(uuid())
  tenant_id     String
  user_id       String
  leave_type_id String
  year          Int
  action_type   String
  old_allocated Decimal? @db.Decimal(5, 2)
  new_allocated Decimal  @db.Decimal(5, 2)
  reason        String?
  created_by    String
  created_at    DateTime @default(now())
  tenant        tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id, user_id])
  @@map("leave_allocation_histories")
}

model approval_category {
  id                       String                    @id @default(uuid())
  company_id               String?
  name                     String
  code                     String
  description              String?
  icon                     String?
  form_schema              Json?
  template_content         String?
  is_active                Boolean                   @default(true)
  order_index              Int                       @default(0)
  created_at               DateTime                  @default(now())
  updated_at               DateTime                  @updatedAt
  drafts                   approval_draft[]
  approval_route_templates approval_route_template[]
  auto_approval_settings   auto_approval_settings[]
  reference_documents      reference_document[]      @relation("reference_documents")

  @@unique([code, company_id])
  @@map("approval_categories")
}

model approval_route_template {
  id          String                          @id @default(uuid())
  tenant_id   String
  company_id  String?
  category_id String?
  name        String
  description String?
  conditions  Json?
  is_default  Boolean                         @default(false)
  is_active   Boolean                         @default(true)
  created_at  DateTime                        @default(now())
  updated_at  DateTime                        @updatedAt
  stages      approval_route_stage_template[]
  category    approval_category?              @relation(fields: [category_id], references: [id])
  tenant      tenant                          @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("approval_route_templates")
}

model approval_route_stage_template {
  id          String                             @id @default(uuid())
  template_id String
  type        String
  mode        String?
  rule        String?
  order_index Int
  name        String?
  approvers   approval_route_approver_template[]
  template    approval_route_template            @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@map("approval_route_stage_templates")
}

model approval_route_approver_template {
  id          String                        @id @default(uuid())
  stage_id    String
  user_id     String?
  role        String?
  order_index Int
  is_required Boolean                       @default(true)
  stage       approval_route_stage_template @relation(fields: [stage_id], references: [id], onDelete: Cascade)

  @@map("approval_route_approver_templates")
}

model approval_draft {
  id                     String                  @id @default(uuid())
  user_id                String
  tenant_id              String
  category_id            String
  title                  String
  content                Json
  description            String?
  status                 String                  @default("DRAFT")
  submitted_at           DateTime?
  completed_at           DateTime?
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  actions                approval_action[]
  category               approval_category       @relation(fields: [category_id], references: [id])
  user                   auth_user               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant                 tenant                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  route                  approval_route?
  attendance_records     attendance[]
  business_trip_expenses business_trip_expense[] @relation("expense_approvals")
  business_trip_reports  business_trip_report[]  @relation("report_approvals")
  business_trip_requests business_trip_request[] @relation("business_trip_approvals")
  attachments            file_attachment[]
  leave_requests         leave_request[]
  overtime_requests      overtime_request[]      @relation("overtime_approval_drafts")

  @@index([tenant_id])
  @@index([tenant_id, status])
  @@map("approval_drafts")
}

model approval_route {
  id       String                 @id @default(uuid())
  draft_id String                 @unique
  stages   approval_route_stage[]
  draft    approval_draft         @relation(fields: [draft_id], references: [id], onDelete: Cascade)

  @@map("approval_routes")
}

model approval_route_stage {
  id          String                    @id @default(uuid())
  route_id    String
  type        String
  mode        String?
  rule        String?
  order_index Int
  name        String?
  status      String                    @default("PENDING")
  approvers   approval_route_approver[]
  route       approval_route            @relation(fields: [route_id], references: [id], onDelete: Cascade)

  @@map("approval_route_stages")
}

model approval_route_approver {
  id          String               @id @default(uuid())
  stage_id    String
  user_id     String
  order_index Int
  status      String               @default("PENDING")
  acted_at    DateTime?
  comments    String?
  stage       approval_route_stage @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  user        auth_user            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("approval_route_approvers")
}

model approval_action {
  id         String         @id @default(uuid())
  draft_id   String
  user_id    String
  action     String
  comments   String?
  metadata   Json?
  created_at DateTime       @default(now())
  draft      approval_draft @relation(fields: [draft_id], references: [id], onDelete: Cascade)
  user       auth_user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("approval_actions")
}

model file_attachment {
  id            String          @id @default(uuid())
  draft_id      String?
  filename      String
  original_name String
  mime_type     String
  size_bytes    Int
  storage_path  String
  public_url    String?
  uploaded_by   String
  created_at    DateTime        @default(now())
  draft         approval_draft? @relation(fields: [draft_id], references: [id], onDelete: Cascade)

  @@map("file_attachments")
}

model codebook {
  id          String   @id @default(uuid())
  company_id  String?
  group_code  String
  code        String
  name        String
  description String?
  order_index Int      @default(0)
  is_active   Boolean  @default(true)
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([group_code, code, company_id])
  @@map("codebook")
}

model settings {
  id          String   @id @default(uuid())
  company_id  String?
  category    String
  key         String
  value       Json
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([category, key, company_id])
  @@map("settings")
}

model audit_log {
  id          String     @id @default(uuid())
  user_id     String?
  action      String
  resource    String
  resource_id String?
  old_values  Json?
  new_values  Json?
  metadata    Json?
  created_at  DateTime   @default(now())
  user        auth_user? @relation(fields: [user_id], references: [id])

  @@map("audit_logs")
}

model notification {
  id             String    @id @default(uuid())
  user_id        String
  title          String
  message        String
  type           String
  reference_type String?
  reference_id   String?
  status         String    @default("UNREAD")
  priority       String    @default("NORMAL")
  metadata       Json?
  created_at     DateTime  @default(now())
  read_at        DateTime?
  user           auth_user @relation("user_notifications", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model expense_category {
  id          String            @id @default(uuid())
  company_id  String?
  name        String
  code        String
  description String?
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  expenses    expense_request[]

  @@unique([code, company_id])
  @@map("expense_categories")
}

model expense_request {
  id               String           @id @default(uuid())
  user_id          String
  category_id      String
  title            String
  description      String?
  amount           Decimal          @db.Decimal(10, 2)
  currency         String           @default("KRW")
  expense_date     DateTime         @db.Date
  receipt_urls     String[]
  status           String           @default("DRAFT")
  submitted_at     DateTime?
  approved_at      DateTime?
  approved_by      String?
  rejected_at      DateTime?
  rejected_by      String?
  rejection_reason String?
  paid_at          DateTime?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  approver         auth_user?       @relation("approved_expense_requests", fields: [approved_by], references: [id])
  category         expense_category @relation(fields: [category_id], references: [id])
  rejecter         auth_user?       @relation("rejected_expense_requests", fields: [rejected_by], references: [id])
  user             auth_user        @relation("user_expense_requests", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("expense_requests")
}

model attitude_session {
  id                   String                 @id @default(uuid())
  user_id              String
  tenant_id            String
  date                 DateTime               @db.Date
  login_time           DateTime
  logout_time          DateTime?
  total_active_time    Int?
  total_idle_time      Int?
  productivity_score   Float?
  status               String                 @default("ACTIVE")
  last_agent_heartbeat DateTime?
  agent_version        String?
  agent_os             String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  app_usage            attitude_app_usage[]
  idle_periods         attitude_idle_period[]
  screenshots          attitude_screenshot[]
  user                 auth_user              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tenant               tenant                 @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  web_usage            attitude_web_usage[]

  @@unique([user_id, date])
  @@index([tenant_id])
  @@index([tenant_id, date])
  @@map("attitude_sessions")
}

model attitude_screenshot {
  id            String           @id @default(uuid())
  session_id    String
  file_url      String
  thumbnail_url String?
  captured_at   DateTime
  is_blurred    Boolean          @default(false)
  metadata      Json?
  created_at    DateTime         @default(now())
  session       attitude_session @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@map("attitude_screenshots")
}

model attitude_idle_period {
  id         String           @id @default(uuid())
  session_id String
  start_time DateTime
  end_time   DateTime?
  duration   Int?
  reason     String?
  created_at DateTime         @default(now())
  session    attitude_session @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@map("attitude_idle_periods")
}

model attitude_app_usage {
  id            String           @id @default(uuid())
  session_id    String
  app_name      String
  app_category  String
  window_title  String?
  start_time    DateTime
  end_time      DateTime?
  duration      Int?
  is_productive Boolean          @default(true)
  created_at    DateTime         @default(now())
  session       attitude_session @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id, app_category])
  @@map("attitude_app_usage")
}

model attitude_web_usage {
  id            String           @id @default(uuid())
  session_id    String
  domain        String
  url           String?
  page_title    String?
  category      String
  visit_count   Int              @default(1)
  total_time    Int?
  is_productive Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  session       attitude_session @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id, category])
  @@map("attitude_web_usage")
}

model attitude_app_whitelist {
  id            String   @id @default(uuid())
  company_id    String?
  app_name      String
  category      String
  is_productive Boolean  @default(true)
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([app_name, company_id])
  @@map("attitude_app_whitelist")
}

model provider_tenant {
  id              String           @id @default(uuid())
  name            String           @default("Nova HR Inc.")
  domain          String           @unique @default("provider.nova-hr.com")
  status          String           @default("ACTIVE")
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  provider_admins provider_admin[]

  @@map("provider_tenant")
}

model provider_admin {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  name              String
  phone             String?
  role              String            @default("PROVIDER_ADMIN")
  status            String            @default("ACTIVE")
  tenant_id         String
  last_login        DateTime?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  approved_requests company_request[] @relation("approver")
  tenant            provider_tenant   @relation(fields: [tenant_id], references: [id])

  @@map("provider_admins")
}

model company_request {
  id               String          @id @default(uuid())
  company_name     String
  business_number  String?
  ceo_name         String
  contact_email    String
  contact_phone    String
  address          String?
  employee_count   String?
  industry         String?
  description      String?
  notes            String?
  status           String          @default("PENDING")
  reviewed_by      String?
  reviewed_at      DateTime?
  rejection_reason String?
  tenant_id        String?
  company_id       String?
  admin_user_id    String?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  reviewer         provider_admin? @relation("approver", fields: [reviewed_by], references: [id])
  tenant           tenant?         @relation(fields: [tenant_id], references: [id])

  @@index([status, created_at])
  @@index([contact_email])
  @@map("company_requests")
}

model attitude_web_whitelist {
  id            String   @id @default(uuid())
  company_id    String?
  domain        String
  category      String
  is_productive Boolean  @default(true)
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([domain, company_id])
  @@map("attitude_web_whitelist")
}

model auto_approval_settings {
  id             String             @id @default(uuid())
  tenant_id      String
  company_id     String?
  category_id    String?
  enabled        Boolean            @default(true)
  conditions     Json
  max_amount     Float?
  approver_type  String             @default("MANAGER")
  fallback_users String[]
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  category       approval_category? @relation(fields: [category_id], references: [id], onDelete: Cascade)
  company        company?           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  tenant         tenant             @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("auto_approval_settings")
}

model reference_document {
  id          String                          @id @default(uuid())
  company_id  String
  author_id   String
  category_id String?
  title       String
  content     Json
  description String?
  tags        String[]
  view_count  Int                             @default(0)
  is_public   Boolean                         @default(true)
  is_template Boolean                         @default(false)
  created_at  DateTime                        @default(now())
  updated_at  DateTime                        @updatedAt
  attachments reference_document_attachment[]
  views       reference_document_view[]
  author      auth_user                       @relation("reference_documents", fields: [author_id], references: [id], onDelete: Cascade)
  category    approval_category?              @relation("reference_documents", fields: [category_id], references: [id])
  company     company                         @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("reference_documents")
}

model reference_document_attachment {
  id          String             @id @default(uuid())
  document_id String
  file_name   String
  file_path   String
  file_size   Int
  mime_type   String
  created_at  DateTime           @default(now())
  document    reference_document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@map("reference_document_attachments")
}

model reference_document_view {
  id          String             @id @default(uuid())
  document_id String
  user_id     String
  viewed_at   DateTime           @default(now())
  document    reference_document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user        auth_user          @relation("reference_document_views", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([document_id, user_id])
  @@map("reference_document_views")
}

model calendar_event {
  id               String                      @id @default(uuid())
  company_id       String
  creator_id       String
  title            String
  description      String?
  start_date       DateTime
  end_date         DateTime
  all_day          Boolean                     @default(false)
  event_type       String                      @default("PERSONAL")
  location         String?
  color            String?                     @default("#1890ff")
  is_public        Boolean                     @default(false)
  is_recurring     Boolean                     @default(false)
  recurrence_rule  String?
  reminder_minutes Int[]                       @default([15])
  status           String                      @default("CONFIRMED")
  created_at       DateTime                    @default(now())
  updated_at       DateTime                    @updatedAt
  attachments      calendar_event_attachment[]
  attendees        calendar_event_attendee[]
  company          company                     @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator          auth_user                   @relation("created_events", fields: [creator_id], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model calendar_event_attendee {
  id               String         @id @default(uuid())
  event_id         String
  user_id          String
  status           String         @default("PENDING")
  response_message String?
  is_organizer     Boolean        @default(false)
  can_edit         Boolean        @default(false)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  event            calendar_event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user             auth_user      @relation("event_attendees", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@map("calendar_event_attendees")
}

model calendar_event_attachment {
  id          String         @id @default(uuid())
  event_id    String
  file_name   String
  file_path   String
  file_size   Int
  mime_type   String
  uploaded_by String
  created_at  DateTime       @default(now())
  event       calendar_event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  uploader    auth_user      @relation("uploaded_event_attachments", fields: [uploaded_by], references: [id], onDelete: Cascade)

  @@map("calendar_event_attachments")
}

model public_holiday {
  id          String   @id @default(uuid())
  country     String   @default("KR")
  name        String
  date        DateTime @db.Date
  is_national Boolean  @default(true)
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([country, date, name])
  @@map("public_holidays")
}

model company_announcement {
  id                String                            @id @default(uuid())
  company_id        String
  author_id         String
  title             String
  content           String
  announcement_type String                            @default("GENERAL")
  priority          String                            @default("NORMAL")
  is_published      Boolean                           @default(false)
  publish_date      DateTime?
  expire_date       DateTime?
  target_audience   String                            @default("ALL")
  department_ids    String[]
  user_ids          String[]
  read_count        Int                               @default(0)
  created_at        DateTime                          @default(now())
  updated_at        DateTime                          @updatedAt
  attachments       company_announcement_attachment[]
  read_receipts     company_announcement_read[]
  author            auth_user                         @relation("authored_announcements", fields: [author_id], references: [id], onDelete: Cascade)
  company           company                           @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("company_announcements")
}

model company_announcement_attachment {
  id              String               @id @default(uuid())
  announcement_id String
  file_name       String
  file_path       String
  file_size       Int
  mime_type       String
  created_at      DateTime             @default(now())
  announcement    company_announcement @relation(fields: [announcement_id], references: [id], onDelete: Cascade)

  @@map("company_announcement_attachments")
}

model company_announcement_read {
  id              String               @id @default(uuid())
  announcement_id String
  user_id         String
  read_at         DateTime             @default(now())
  announcement    company_announcement @relation(fields: [announcement_id], references: [id], onDelete: Cascade)
  user            auth_user            @relation("read_announcements", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([announcement_id, user_id])
  @@map("company_announcement_reads")
}

model user_calendar_settings {
  id                    String    @id @default(uuid())
  user_id               String    @unique
  default_view          String    @default("MONTH")
  week_start            Int       @default(0)
  work_hours_start      String    @default("09:00")
  work_hours_end        String    @default("18:00")
  show_weekends         Boolean   @default(true)
  default_reminder      Int       @default(15)
  time_zone             String    @default("Asia/Seoul")
  show_declined_events  Boolean   @default(false)
  calendar_color_scheme Json?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  user                  auth_user @relation("calendar_settings", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_calendar_settings")
}

model hr_community_post {
  id                    String                      @id @default(uuid())
  company_id            String
  author_id             String
  title                 String
  content               String
  post_type             String                      @default("GENERAL")
  priority              String                      @default("NORMAL")
  is_pinned             Boolean                     @default(false)
  is_published          Boolean                     @default(true)
  allow_comments        Boolean                     @default(true)
  view_count            Int                         @default(0)
  like_count            Int                         @default(0)
  comment_count         Int                         @default(0)
  notification_settings Json?
  target_audience       String                      @default("ALL")
  department_ids        String[]
  role_ids              String[]
  user_ids              String[]
  tags                  String[]
  created_at            DateTime                    @default(now())
  updated_at            DateTime                    @updatedAt
  attachments           hr_community_attachment[]
  comments              hr_community_comment[]
  likes                 hr_community_like[]
  notifications         hr_community_notification[]
  author                auth_user                   @relation("authored_community_posts", fields: [author_id], references: [id], onDelete: Cascade)
  company               company                     @relation(fields: [company_id], references: [id], onDelete: Cascade)
  views                 hr_community_view[]

  @@map("hr_community_posts")
}

model hr_community_attachment {
  id          String            @id @default(uuid())
  post_id     String
  file_name   String
  file_path   String
  file_size   Int
  mime_type   String
  uploaded_by String
  created_at  DateTime          @default(now())
  post        hr_community_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  uploader    auth_user         @relation("uploaded_community_attachments", fields: [uploaded_by], references: [id], onDelete: Cascade)

  @@map("hr_community_attachments")
}

model hr_community_comment {
  id         String                 @id @default(uuid())
  post_id    String
  author_id  String
  parent_id  String?
  content    String
  is_edited  Boolean                @default(false)
  created_at DateTime               @default(now())
  updated_at DateTime               @updatedAt
  author     auth_user              @relation("authored_community_comments", fields: [author_id], references: [id], onDelete: Cascade)
  parent     hr_community_comment?  @relation("comment_replies", fields: [parent_id], references: [id])
  replies    hr_community_comment[] @relation("comment_replies")
  post       hr_community_post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("hr_community_comments")
}

model hr_community_like {
  id         String            @id @default(uuid())
  post_id    String
  user_id    String
  created_at DateTime          @default(now())
  post       hr_community_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       auth_user         @relation("community_likes", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("hr_community_likes")
}

model hr_community_view {
  id        String            @id @default(uuid())
  post_id   String
  user_id   String
  viewed_at DateTime          @default(now())
  post      hr_community_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      auth_user         @relation("community_views", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("hr_community_views")
}

model hr_community_notification {
  id                String            @id @default(uuid())
  post_id           String
  recipient_id      String
  notification_type String
  title             String
  message           String
  is_read           Boolean           @default(false)
  web_push_sent     Boolean           @default(false)
  email_sent        Boolean           @default(false)
  app_push_sent     Boolean           @default(false)
  web_push_sent_at  DateTime?
  email_sent_at     DateTime?
  app_push_sent_at  DateTime?
  created_at        DateTime          @default(now())
  read_at           DateTime?
  post              hr_community_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  recipient         auth_user         @relation("received_community_notifications", fields: [recipient_id], references: [id], onDelete: Cascade)

  @@map("hr_community_notifications")
}

model user_notification_preference {
  id                  String    @id @default(uuid())
  user_id             String    @unique
  web_push_enabled    Boolean   @default(true)
  email_enabled       Boolean   @default(true)
  app_push_enabled    Boolean   @default(true)
  community_posts     Boolean   @default(true)
  announcements       Boolean   @default(true)
  comments            Boolean   @default(true)
  likes               Boolean   @default(false)
  mentions            Boolean   @default(true)
  urgent_only         Boolean   @default(false)
  quiet_hours_enabled Boolean   @default(false)
  quiet_hours_start   String?   @default("22:00")
  quiet_hours_end     String?   @default("08:00")
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  user                auth_user @relation("notification_preferences", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model web_push_subscription {
  id         String    @id @default(uuid())
  user_id    String
  endpoint   String    @unique
  p256dh_key String
  auth_key   String
  user_agent String?
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       auth_user @relation("web_push_subscriptions", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("web_push_subscriptions")
}

model notification_template {
  id                String   @id @default(uuid())
  company_id        String?
  name              String
  notification_type String
  channel           String
  subject           String?
  title             String
  body              String
  html_body         String?
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  company           company? @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@unique([company_id, name, channel])
  @@map("notification_templates")
}

model company_feature_config {
  id                        String                    @id @default(uuid())
  company_id                String                    @unique
  attendance_enabled        Boolean                   @default(true)
  leave_enabled             Boolean                   @default(true)
  approval_enabled          Boolean                   @default(true)
  hr_community_enabled      Boolean                   @default(true)
  calendar_enabled          Boolean                   @default(true)
  geofence_enabled          Boolean                   @default(true)
  face_recognition_enabled  Boolean                   @default(false)
  qr_checkin_enabled        Boolean                   @default(false)
  overtime_enabled          Boolean                   @default(true)
  remote_work_enabled       Boolean                   @default(true)
  annual_leave_enabled      Boolean                   @default(true)
  sick_leave_enabled        Boolean                   @default(true)
  special_leave_enabled     Boolean                   @default(true)
  leave_calendar_enabled    Boolean                   @default(true)
  auto_approval_enabled     Boolean                   @default(false)
  dynamic_forms_enabled     Boolean                   @default(true)
  parallel_approval_enabled Boolean                   @default(false)
  deputy_approval_enabled   Boolean                   @default(true)
  bulk_approval_enabled     Boolean                   @default(true)
  company_notice_enabled    Boolean                   @default(true)
  team_board_enabled        Boolean                   @default(true)
  survey_enabled            Boolean                   @default(true)
  anonymous_post_enabled    Boolean                   @default(false)
  ai_assistant_enabled      Boolean                   @default(false)
  analytics_enabled         Boolean                   @default(true)
  custom_reports_enabled    Boolean                   @default(false)
  api_access_enabled        Boolean                   @default(false)
  created_at                DateTime                  @default(now())
  updated_at                DateTime                  @updatedAt
  company                   company                   @relation("company_features", fields: [company_id], references: [id], onDelete: Cascade)
  menu_permissions          company_menu_permission[]

  @@map("company_feature_configs")
}

model company_menu_permission {
  id           String                 @id @default(uuid())
  config_id    String
  role         String
  menu_key     String
  can_view     Boolean                @default(false)
  can_create   Boolean                @default(false)
  can_edit     Boolean                @default(false)
  can_delete   Boolean                @default(false)
  can_approve  Boolean                @default(false)
  can_export   Boolean                @default(false)
  scope        String                 @default("SELF")
  custom_rules Json?
  created_at   DateTime               @default(now())
  updated_at   DateTime               @updatedAt
  config       company_feature_config @relation(fields: [config_id], references: [id], onDelete: Cascade)

  @@unique([config_id, role, menu_key])
  @@map("company_menu_permissions")
}

model company_feature_limit {
  id                String    @id @default(uuid())
  company_id        String
  feature_key       String
  limit_value       Int
  current_usage     Int       @default(0)
  reset_period      String?
  last_reset_at     DateTime?
  warning_threshold Int?
  notification_sent Boolean   @default(false)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  company           company   @relation("company_limits", fields: [company_id], references: [id], onDelete: Cascade)

  @@unique([company_id, feature_key])
  @@map("company_feature_limits")
}

model common_code_category {
  id            String        @id @default(uuid())
  company_id    String?
  category_code String
  category_name String
  description   String?
  is_system     Boolean       @default(false)
  is_active     Boolean       @default(true)
  sort_order    Int           @default(0)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  company       company?      @relation("company_code_categories", fields: [company_id], references: [id], onDelete: Cascade)
  codes         common_code[]

  @@unique([company_id, category_code])
  @@map("common_code_categories")
}

model common_code {
  id             String               @id @default(uuid())
  category_id    String
  code           String
  name           String
  description    String?
  parent_code_id String?
  extra_data     Json?
  is_active      Boolean              @default(true)
  sort_order     Int                  @default(0)
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  category       common_code_category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  parent_code    common_code?         @relation("code_hierarchy", fields: [parent_code_id], references: [id])
  child_codes    common_code[]        @relation("code_hierarchy")
  expense_limits expense_limit[]
  user_grades    user_grade[]
  user_positions user_position[]

  @@unique([category_id, code])
  @@map("common_codes")
}

model user_position {
  id               String      @id @default(uuid())
  user_id          String
  position_code_id String
  effective_date   DateTime    @default(now())
  end_date         DateTime?
  is_primary       Boolean     @default(true)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  position_code    common_code @relation(fields: [position_code_id], references: [id])
  user             auth_user   @relation("user_positions", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_positions")
}

model user_grade {
  id             String      @id @default(uuid())
  user_id        String
  grade_code_id  String
  effective_date DateTime    @default(now())
  end_date       DateTime?
  is_primary     Boolean     @default(true)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  grade_code     common_code @relation(fields: [grade_code_id], references: [id])
  user           auth_user   @relation("user_grades", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_grades")
}

model expense_limit {
  id                  String       @id @default(uuid())
  company_id          String
  grade_code_id       String?
  position_code_id    String?
  expense_category    String
  daily_limit         Decimal?     @db.Decimal(12, 2)
  monthly_limit       Decimal?     @db.Decimal(12, 2)
  yearly_limit        Decimal?     @db.Decimal(12, 2)
  currency            String       @default("IDR")
  approval_required   Boolean      @default(true)
  auto_approval_limit Decimal?     @db.Decimal(12, 2)
  is_active           Boolean      @default(true)
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  company             company      @relation("company_expense_limits", fields: [company_id], references: [id], onDelete: Cascade)
  grade_code          common_code? @relation(fields: [grade_code_id], references: [id])

  @@unique([company_id, grade_code_id, position_code_id, expense_category])
  @@map("expense_limits")
}

model overtime_request {
  id                String                @id @default(uuid())
  user_id           String
  company_id        String
  overtime_type     String
  work_date         DateTime
  start_time        DateTime
  end_time          DateTime
  total_hours       Decimal               @db.Decimal(4, 2)
  title             String
  work_description  String
  reason            String
  approval_draft_id String?
  status            String                @default("PENDING")
  approved_by       String?
  approved_at       DateTime?
  approved_hours    Decimal?              @db.Decimal(4, 2)
  rejection_reason  String?
  hourly_rate       Decimal?              @db.Decimal(10, 2)
  total_payment     Decimal?              @db.Decimal(12, 2)
  is_paid           Boolean               @default(false)
  paid_at           DateTime?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  attachments       overtime_attachment[]
  approval_draft    approval_draft?       @relation("overtime_approval_drafts", fields: [approval_draft_id], references: [id])
  approved_by_user  auth_user?            @relation("approved_overtime_requests", fields: [approved_by], references: [id])
  company           company               @relation("company_overtime_requests", fields: [company_id], references: [id], onDelete: Cascade)
  user              auth_user             @relation("user_overtime_requests", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("overtime_requests")
}

model overtime_attachment {
  id                  String           @id @default(uuid())
  overtime_request_id String
  file_name           String
  file_path           String
  file_size           Int
  file_type           String
  uploaded_by         String
  uploaded_at         DateTime         @default(now())
  overtime_request    overtime_request @relation(fields: [overtime_request_id], references: [id], onDelete: Cascade)
  uploaded_by_user    auth_user        @relation("uploaded_overtime_attachments", fields: [uploaded_by], references: [id])

  @@map("overtime_attachments")
}

model overtime_policy {
  id                     String    @id @default(uuid())
  company_id             String
  policy_name            String
  overtime_type          String
  max_daily_hours        Decimal?  @db.Decimal(4, 2)
  max_weekly_hours       Decimal?  @db.Decimal(4, 2)
  max_monthly_hours      Decimal?  @db.Decimal(5, 2)
  base_hourly_rate       Decimal?  @db.Decimal(10, 2)
  rate_multiplier        Decimal   @default(1.5) @db.Decimal(3, 2)
  requires_approval      Boolean   @default(true)
  auto_approval_hours    Decimal?  @db.Decimal(4, 2)
  advance_notice_hours   Int?
  applicable_roles       Json?
  applicable_departments Json?
  is_active              Boolean   @default(true)
  effective_from         DateTime  @default(now())
  effective_until        DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  company                company   @relation("company_overtime_policies", fields: [company_id], references: [id], onDelete: Cascade)

  @@map("overtime_policies")
}

model currency_setting {
  id                 String   @id @default(uuid())
  company_id         String   @unique
  default_currency   String   @default("IDR")
  currency_symbol    String   @default("Rp")
  show_local_format  Boolean  @default(true)
  decimal_places     Int      @default(0)
  thousand_separator String   @default(",")
  decimal_separator  String   @default(".")
  exchange_rates     Json?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  company            company  @relation("company_currency_setting", fields: [company_id], references: [id], onDelete: Cascade)

  @@map("currency_settings")
}

model business_trip_setting {
  id                      String   @id @default(uuid())
  company_id              String   @unique
  auto_approval_limit     Decimal? @db.Decimal(12, 2)
  advance_payment_enabled Boolean  @default(true)
  grade_limits            Json
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  company                 company  @relation("company_business_trip_setting", fields: [company_id], references: [id], onDelete: Cascade)

  @@map("business_trip_settings")
}

model business_trip_request {
  id                String                  @id @default(uuid())
  user_id           String
  approval_draft_id String?
  trip_type         String
  destination       String
  purpose           String
  start_date        DateTime
  end_date          DateTime
  duration_days     Int
  travelers         Json
  estimated_costs   Json
  advance_payment   Decimal?                @db.Decimal(12, 2)
  actual_costs      Json?
  status            String                  @default("DRAFT")
  submitted_at      DateTime?
  approved_at       DateTime?
  completed_at      DateTime?
  itinerary         String?
  notes             String?
  attachments       String[]
  created_at        DateTime                @default(now())
  updated_at        DateTime                @updatedAt
  expenses          business_trip_expense[] @relation("trip_expenses")
  reports           business_trip_report?   @relation("trip_report")
  approval_draft    approval_draft?         @relation("business_trip_approvals", fields: [approval_draft_id], references: [id])
  user              auth_user               @relation("user_business_trips", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("business_trip_requests")
}

model business_trip_expense {
  id                String                @id @default(uuid())
  business_trip_id  String
  approval_draft_id String?
  expense_items     Json
  total_amount      Decimal               @db.Decimal(12, 2)
  currency          String                @default("IDR")
  receipt_urls      String[]
  status            String                @default("DRAFT")
  submitted_at      DateTime?
  approved_at       DateTime?
  paid_at           DateTime?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  approval_draft    approval_draft?       @relation("expense_approvals", fields: [approval_draft_id], references: [id])
  business_trip     business_trip_request @relation("trip_expenses", fields: [business_trip_id], references: [id], onDelete: Cascade)

  @@map("business_trip_expenses")
}

model business_trip_report {
  id                String                @id @default(uuid())
  business_trip_id  String                @unique
  approval_draft_id String?
  achievements      String
  challenges        String?
  recommendations   String?
  follow_up_actions String?
  attachments       String[]
  status            String                @default("DRAFT")
  submitted_at      DateTime?
  approved_at       DateTime?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  approval_draft    approval_draft?       @relation("report_approvals", fields: [approval_draft_id], references: [id])
  business_trip     business_trip_request @relation("trip_report", fields: [business_trip_id], references: [id], onDelete: Cascade)

  @@map("business_trip_reports")
}
